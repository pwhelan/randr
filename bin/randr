#!/usr/bin/env php
<?php

use React\Promise;
use React\Stream;
use React\EventLoop;

use Clue\React\Redis;

use Illuminate\Support\Collection;

use Randr\ProcessContext as Context;

require_once __DIR__.'/../vendor/autoload.php';


$APP_INCLUDE = getenv('APP_INCLUDE');
$QUEUE = getenv('QUEUE');

$REDIS_BACKEND = getenv('REDIS_BACKEND');
$REDIS_DATABASE = getenv('REDIS_DATABASE');
$REDIS_NAMESPACE = getenv('REDIS_NAMESPACE');

$logLevel = Resque_Worker::LOG_NONE;
$LOGGING = getenv('LOGGING');
$VERBOSE = getenv('VERBOSE');
$VVERBOSE = getenv('VVERBOSE');
if (!empty($LOGGING) || !empty($VERBOSE)) {
	$logLevel = Resque_Worker::LOG_NORMAL;
} elseif (!empty($VVERBOSE)) {
	$logLevel = Resque_Worker::LOG_VERBOSE;
}

$interval = 5;
$INTERVAL = getenv('INTERVAL');
if (!empty($INTERVAL)) {
	$interval = $INTERVAL;
}

$ttl = -1;
$TTL = getenv('TTL');
if (!empty($TTL)) {
	$ttl = $TTL;
}

$options = (object)[
	'redis'	=> [
		'backend'	=> $REDIS_BACKEND ? $REDIS_BACKEND : '127.0.0.1:6379',
		'namespace'	=> $REDIS_NAMESPACE ? $REDIS_NAMESPACE : 'resque',
		'database'	=> $REDIS_DATABASE ? $REDIS_DATABASE : 0
	],
	'queues' => $QUEUE,
	'interval' => $interval,
	'ttl' => $ttl
];

$loop = EventLoop\Factory::create();
$redis = new Redis\Factory($loop);


class FakeAsyncResqueRedis //extends Resque_Redis
{
	private $client;
	
	/**
	* Redis namespace
	* @var string
	*/
	private static $defaultNamespace = 'resque:';
	
	/**
	* @var array List of all commands in Redis that supply a key as their
	*	first argument. Used to prefix keys with the Resque namespace.
	*/
	private $keyCommands = array(
		'exists',
		'del',
		'type',
		'keys',
		'expire',
		'ttl',
		'move',
		'set',
		'get',
		'getset',
		'setnx',
		'incr',
		'incrby',
		'decr',
		'decrby',
		'rpush',
		'lpush',
		'llen',
		'lrange',
		'ltrim',
		'lindex',
		'lset',
		'lrem',
		'lpop',
		'rpop',
		'sadd',
		'srem',
		'spop',
		'scard',
		'sismember',
		'smembers',
		'srandmember',
		'zadd',
		'zrem',
		'zrange',
		'zrevrange',
		'zrangebyscore',
		'zcard',
		'zscore',
		'zremrangebyscore',
		'sort'
	);
	// sinterstore
	// sunion
	// sunionstore
	// sdiff
	// sdiffstore
	// sinter
	// smove
	// rename
	// rpoplpush
	// mget
	// msetnx
	// mset
	// renamenx
	
	/**
	* Set Redis namespace (prefix) default: resque
	* @param string $namespace
	*/
	public function prefix($namespace)
	{
		if (strpos($namespace, ':') === false) {
			$namespace .= ':';
		}
		self::$defaultNamespace = $namespace;
	}
	
	/**
	* Magic method to handle all function requests and prefix key based
	* operations with the {self::$defaultNamespace} key prefix.
	*
	* @param string $name The name of the method called.
	* @param array $args Array of supplied arguments to the method.
	* @return mixed Return value from Resident::call() based on the command.
	*/
	public function __call($name, $args)
	{
		$args = func_get_args();
		if(in_array($name, $this->keyCommands)) {
			$args[1][0] = self::$defaultNamespace . $args[1][0];
		}
		try {
			return call_user_func_array([$this->client, $name], $args[1]);
		}
		catch(Exception $e) {
			return false;
		}
	}
	
	public function __construct(Redis\Client $client)
	{
		$this->client = $client;
	}
	
}

class Randr_Resque extends Resque
{
	public static function setRedisConnection(FakeAsyncResqueRedis $client)
	{
		self::$redis = $client;
		self::$pid = getmypid();
	}
	
	/**
	 * Get an array of all known queues.
	 *
	 * @return array Array of queues.
	 */
	public static function queues()
	{
		$queues = self::redis()->smembers('queues');
		return $queues;
	}
}

if ($APP_INCLUDE)
{
	if (!file_exists($APP_INCLUDE))
	{
		print "Unable to find APP_INCLUDE: {$APP_INCLUDE}\n";
		exit(1);
	}
	
	include_once $APP_INCLUDE;
}

$redis->createClient('tcp://' . $options->redis['backend'] .'/' . $options->redis['database'])
	->then(function (Redis\Client $client) use ($loop, $options) {
		
		// Setup fake Async redis connection for Resque.
		// This of course only works with certain calls.
		$redisresque = new FakeAsyncResqueRedis($client);
		$redisresque->prefix($options->redis['namespace']);
		Randr_Resque::setRedisConnection($redisresque);
		
		
		$context = new Context([
			'process'	=> null,
			'client'	=> $client,
			'options'	=> $options,
			'queues'	=> Collection::make(array_map(
				function($queue) use ($options) {
					
					$m = preg_match("/([a-zA-Z]+)(?:\\[(\\d+)(?:|\\:\\d+)\\]|)/u", $queue, $matches);
					if (!$m) {
						die("Bad Queue: ".$queue);
					}
					
					$name		= $matches[1];
					$workers	= count($matches) >= 3 ? $matches[2] : 1;
					$intval		= count($matches) >= 4 ? $matches[3] : 0;
					
					return (object)[
						'name'		=> $options->redis['namespace'].':queue:'.$name,
						'interval'	=> $intval,
						'workers'	=> (object)[
							'max'	=> $workers,
							'cur'	=> 0,
							'total'	=> 0,
							'failed'=> 0
						]
					];
				},
				is_array($options->queues) ? $options->queues : explode(',', $options->queues)
			)),
			'worker'	=> null
		]);
		
		$wp = new Randr\Worker\Pool($loop, $context->queues, $context->options->ttl);
		
		$context->worker = new Resque_Worker($context->queues->lists('name'));
		$context->worker->registerWorker();
		
		
		$listQueues = function() use ($context) {
			print "QUEUES:\n";
			foreach ($context->queues->toArray() as $q) {
				print "\t[ ] {$q->name} {$q->workers->cur} => ".
					"{$q->workers->max} [{$q->workers->total}]\n";
			}
		};
		
		
		$pcntl = new MKraemer\ReactPCNTL\PCNTL($loop);
		$pcntl->on(SIGHUP, $listQueues);
		
		
		$context->process = function($context) use ($loop, $wp)
		{
			$args = $context->queues
				->filter(function($queue) {
					return $queue->workers->cur < $queue->workers->max;
				})
				->lists('name');
			
			if (count($args) <= 0)
			{
				$loop->addTimer($context->options->interval, function() use ($context) {
					$context->process($context);
				});
				return;
			}
			
			$args[] = $context->options->interval;
			
			
			$promise = call_user_func_array([$context->client, 'blpop'], $args);
			
			$promise->then(function($resp) use ($context, $wp) {
				try
				{
					if ($resp)
					{
						list($qname, $payload) = $resp;
						
						
						$queue = $context->queues
							->filter(function($queue) use ($qname) {
								return $queue->name == $qname;
							})
							->first();
						
						$job = new Randr\Job($queue->name, json_decode($payload, true));
						$child = $wp->run($job);
						
						$child->once('exit', function() use ($queue) {
							$queue->workers->cur--;
						});
						
						$child->once('fail', function() use ($queue) {
							$queue->workers->failed++;
						});
						
						$queue->workers->total++;
						$queue->workers->cur++;
					}
				}
				catch (Exception $e)
				{
					print "ERROR: ".$e->getMessage()."\n";
				}
				
				$context->process($context);
			});
		};
		
		$context->process($context);
	});

print "PID = ".getmypid()."\n";
$loop->run();
